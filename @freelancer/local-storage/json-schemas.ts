// This file is automatically @generated by scripts/generate-json-schema/index.ts

export const topLevelSchemas = {
  arrowPostProjectDraft: {
    anyOf: [
      { $ref: 'defs.json#/definitions/ArrowPostJobFormState' },
      { type: 'null' },
    ],
  },
  developersPreference: {
    anyOf: [
      { $ref: 'defs.json#/definitions/DevelopersPreference' },
      { type: 'null' },
    ],
  },
  postProjectObject: {
    anyOf: [
      { $ref: 'defs.json#/definitions/ProjectViewProject' },
      { type: 'null' },
    ],
  },
  projectOverlayThreadComplete: {
    type: 'object',
    additionalProperties: false,
    patternProperties: { '^[0-9]+$': { type: 'boolean' } },
  },
  projectOverlayFullFlowComplete: { type: 'boolean' },
  webappChats: {
    type: 'array',
    items: {
      type: 'object',
      properties: {
        minimised: { type: 'boolean' },
        focus: { $ref: 'defs.json#/definitions/FocusState' },
        width: { type: 'number' },
        height: { type: 'number' },
        threadIdentifier: { $ref: 'defs.json#/definitions/ThreadIdentifier' },
      },
      required: ['focus', 'height', 'minimised', 'threadIdentifier', 'width'],
    },
  },
  webappChatDraftMessages: {
    type: 'object',
    additionalProperties: {
      anyOf: [
        { $ref: 'defs.json#/definitions/DraftMessage' },
        { type: 'null' },
      ],
    },
  },
  webappThreadListMinimise: { type: 'boolean' },
  contestShowSocialShareBanner: {
    type: 'object',
    additionalProperties: false,
    patternProperties: { '^[0-9]+$': { type: 'boolean' } },
  },
  taskList: {
    anyOf: [{ $ref: 'defs.json#/definitions/TaskListState' }, { type: 'null' }],
  },
  taskListCurrentTaskClean: { type: ['null', 'boolean'] },
  lastSeenPjpAssistant: { $ref: 'defs.json#/definitions/LastSeenPjpAssistant' },
  hireMeDraft: {
    anyOf: [{ $ref: 'defs.json#/definitions/HireMeDraft' }, { type: 'null' }],
  },
  navUpdatesLastReadTime: { type: ['null', 'number'] },
  dashboardMyProjectsUserType: {
    anyOf: [
      { enum: ['employer', 'freelancer'], type: 'string' },
      { type: 'null' },
    ],
  },
  enterpriseContactFormSubmitted: { type: 'boolean' },
  postJobPageDraft: {
    anyOf: [
      { $ref: 'defs.json#/definitions/PostJobPageFormState' },
      { type: 'null' },
    ],
  },
  manageRecentTable: {
    anyOf: [
      { $ref: 'defs.json#/definitions/ManageRecentTable' },
      { type: 'null' },
    ],
  },
  inviteToBidDiscardedFreelancers: {
    type: 'object',
    additionalProperties: false,
    patternProperties: {
      '^[0-9]+$': { type: 'array', items: { type: 'number' } },
    },
  },
  hideMobileNewMessageToast: { type: 'boolean' },
  hideEnablePushNotificationsBanner: { type: 'boolean' },
  deviceId: { type: ['null', 'string'] },
  testProperty: { type: 'number' },
  testName: { type: ['null', 'string'] },
  testProfile: { $ref: 'defs.json#/definitions/MockProfile' },
};

export const definitions = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  definitions: {
    LocalStorageTypes: {
      description:
        'Holds the types which can be stored in local storage i.e. are JSON serialisable.\nValues can be restricted to solely their type,\nor can also be allowed to be `null` (if the item needs to be able to be deleted).',
      type: 'object',
      properties: {
        arrowPostProjectDraft: {
          anyOf: [
            { $ref: 'defs.json#/definitions/ArrowPostJobFormState' },
            { type: 'null' },
          ],
        },
        developersPreference: {
          anyOf: [
            { $ref: 'defs.json#/definitions/DevelopersPreference' },
            { type: 'null' },
          ],
        },
        postProjectObject: {
          anyOf: [
            { $ref: 'defs.json#/definitions/ProjectViewProject' },
            { type: 'null' },
          ],
        },
        projectOverlayThreadComplete: {
          type: 'object',
          additionalProperties: false,
          patternProperties: { '^[0-9]+$': { type: 'boolean' } },
        },
        projectOverlayFullFlowComplete: { type: 'boolean' },
        webappChats: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              minimised: { type: 'boolean' },
              focus: { $ref: 'defs.json#/definitions/FocusState' },
              width: { type: 'number' },
              height: { type: 'number' },
              threadIdentifier: {
                $ref: 'defs.json#/definitions/ThreadIdentifier',
              },
            },
            required: [
              'focus',
              'height',
              'minimised',
              'threadIdentifier',
              'width',
            ],
          },
        },
        webappChatDraftMessages: {
          type: 'object',
          additionalProperties: {
            anyOf: [
              { $ref: 'defs.json#/definitions/DraftMessage' },
              { type: 'null' },
            ],
          },
        },
        webappThreadListMinimise: { type: 'boolean' },
        contestShowSocialShareBanner: {
          type: 'object',
          additionalProperties: false,
          patternProperties: { '^[0-9]+$': { type: 'boolean' } },
        },
        taskList: {
          anyOf: [
            { $ref: 'defs.json#/definitions/TaskListState' },
            { type: 'null' },
          ],
        },
        taskListCurrentTaskClean: { type: ['null', 'boolean'] },
        lastSeenPjpAssistant: {
          $ref: 'defs.json#/definitions/LastSeenPjpAssistant',
        },
        hireMeDraft: {
          anyOf: [
            { $ref: 'defs.json#/definitions/HireMeDraft' },
            { type: 'null' },
          ],
        },
        navUpdatesLastReadTime: { type: ['null', 'number'] },
        dashboardMyProjectsUserType: {
          anyOf: [
            { enum: ['employer', 'freelancer'], type: 'string' },
            { type: 'null' },
          ],
        },
        enterpriseContactFormSubmitted: { type: 'boolean' },
        postJobPageDraft: {
          anyOf: [
            { $ref: 'defs.json#/definitions/PostJobPageFormState' },
            { type: 'null' },
          ],
        },
        manageRecentTable: {
          anyOf: [
            { $ref: 'defs.json#/definitions/ManageRecentTable' },
            { type: 'null' },
          ],
        },
        inviteToBidDiscardedFreelancers: {
          type: 'object',
          additionalProperties: false,
          patternProperties: {
            '^[0-9]+$': { type: 'array', items: { type: 'number' } },
          },
        },
        hideMobileNewMessageToast: { type: 'boolean' },
        hideEnablePushNotificationsBanner: { type: 'boolean' },
        deviceId: { type: ['null', 'string'] },
        testProperty: { type: 'number' },
        testName: { type: ['null', 'string'] },
        testProfile: { $ref: 'defs.json#/definitions/MockProfile' },
      },
      required: [
        'arrowPostProjectDraft',
        'contestShowSocialShareBanner',
        'dashboardMyProjectsUserType',
        'developersPreference',
        'deviceId',
        'enterpriseContactFormSubmitted',
        'hideEnablePushNotificationsBanner',
        'hideMobileNewMessageToast',
        'hireMeDraft',
        'inviteToBidDiscardedFreelancers',
        'lastSeenPjpAssistant',
        'manageRecentTable',
        'navUpdatesLastReadTime',
        'postJobPageDraft',
        'postProjectObject',
        'projectOverlayFullFlowComplete',
        'projectOverlayThreadComplete',
        'taskList',
        'taskListCurrentTaskClean',
        'testName',
        'testProfile',
        'testProperty',
        'webappChatDraftMessages',
        'webappChats',
        'webappThreadListMinimise',
      ],
    },
    ArrowPostJobFormState: {
      description:
        'This is to store the state of the AFLN PJP form state in order to save as a draft. The fields have `null`\nbecause when you call `.reset()` on the form group, the form controls in it are all set to `null`\nas the default value unless overridden.',
      type: 'object',
      properties: {
        ownershipType: {
          anyOf: [
            { enum: ['otherUser', 'self'], type: 'string' },
            { type: 'null' },
          ],
        },
        ownershipUser: { type: ['null', 'string'] },
        ownershipHasPartner: { type: ['null', 'boolean'] },
        ownershipPartner: { type: ['null', 'string'] },
        title: { type: ['null', 'string'] },
        description: { type: ['null', 'string'] },
        ndaHiddenDescription: { type: ['null', 'string'] },
        skills: {
          type: 'array',
          items: { $ref: 'defs.json#/definitions/Skill' },
        },
        hasDeadline: { type: 'boolean' },
        startDate: {
          description:
            'Enables basic storage and retrieval of dates and times.',
          type: 'string',
          format: 'date-time',
        },
        completionDate: {
          anyOf: [
            {
              description:
                'Enables basic storage and retrieval of dates and times.',
              type: 'string',
              format: 'date-time',
            },
            { type: 'null' },
          ],
        },
        audience: { type: ['null', 'string'] },
        budgetType: { type: ['null', 'string'] },
        currencyId: { type: 'number' },
        budget: {
          anyOf: [
            {
              type: 'object',
              properties: {
                minimum: { type: ['null', 'number'] },
                maximum: { type: ['null', 'number'] },
              },
              required: ['minimum'],
            },
            { type: ['null', 'string'] },
          ],
        },
        customBudget: {
          type: 'object',
          properties: {
            minimum: { type: ['null', 'string', 'number'] },
            maximum: { type: ['null', 'string', 'number'] },
          },
          required: ['maximum', 'minimum'],
        },
        upgrades: { type: 'object', additionalProperties: { type: 'boolean' } },
      },
      required: [
        'budget',
        'budgetType',
        'currencyId',
        'description',
        'hasDeadline',
        'ndaHiddenDescription',
        'skills',
        'title',
        'upgrades',
      ],
    },
    Skill: {
      description:
        'A skill possessed by a freelancer, and required by projects to allow bidding.\n\nTODO T72831: Confusingly the API calls this a Job, conflicting with the Post\nJob Page which posts a project or contest, among others.',
      type: 'object',
      properties: {
        id: { type: 'number' },
        name: { type: 'string' },
        category: { $ref: 'defs.json#/definitions/Category' },
        local: { type: 'boolean' },
        seoUrl: { type: 'string' },
        activeProjectCount: { type: 'number' },
      },
      required: ['activeProjectCount', 'id', 'local', 'name', 'seoUrl'],
    },
    Category: {
      type: 'object',
      properties: { id: { type: 'number' }, name: { type: 'string' } },
      required: ['id'],
    },
    DevelopersPreference: {
      type: 'object',
      properties: {
        language: { type: 'string', enum: ['bash'] },
        environment: { $ref: 'defs.json#/definitions/DeveloperEnvironment' },
      },
      required: ['environment', 'language'],
    },
    DeveloperEnvironment: {
      enum: ['Dev', 'Production', 'Sandbox', 'Staging'],
      type: 'string',
    },
    ProjectViewProject: {
      description:
        'A project.\nUsed on the Freelancer Project View Page.\n\nProjections: `attachment_details`, `full_description`, `job_details`,\n`location_details`, `qualification_details`, `upgrade_details`,\n`nda_details`, `project_collaboration_details`, `upgrade_details`,\n`review_availability_details`, `local_details`, `equipment`',
      type: 'object',
      properties: {
        attachments: {
          type: 'array',
          items: { $ref: 'defs.json#/definitions/ProjectAttachment' },
        },
        canPostReview: { $ref: 'defs.json#/definitions/ReviewAvailabilityApi' },
        description: { type: 'string' },
        skills: {
          type: 'array',
          items: { $ref: 'defs.json#/definitions/Skill' },
        },
        location: { $ref: 'defs.json#/definitions/Location' },
        true_location: { $ref: 'defs.json#/definitions/Location' },
        ndaDetails: { $ref: 'defs.json#/definitions/NDADetails' },
        qualifications: {
          type: 'array',
          items: { $ref: 'defs.json#/definitions/Qualification' },
        },
        displayLocation: { type: 'string' },
        localDetails: { $ref: 'defs.json#/definitions/ProjectLocalDetails' },
        equipment: {
          type: 'array',
          items: { $ref: 'defs.json#/definitions/EquipmentApi' },
        },
        invitedFreelancers: { type: 'array', items: { type: 'number' } },
        repostId: { type: 'number' },
        hiremeOpenedForBidding: { type: 'boolean' },
        bidPeriod: { type: 'number' },
        bidStats: { $ref: 'defs.json#/definitions/ProjectBidStats' },
        budget: { $ref: 'defs.json#/definitions/ProjectBudget' },
        currency: { $ref: 'defs.json#/definitions/Currency' },
        deleted: { type: 'boolean' },
        frontendProjectStatus: {
          description:
            'WARNING: Do not rely on this in tests or in the app. It can be broken for projects\nthat move backwards in the project flow at any point (e.g. cancelled then reawarded),\nand multi-award. Use ProjectStatusHelper instead.',
          enum: ['complete', 'draft', 'open', 'pending', 'work_in_progress'],
          type: 'string',
        },
        hideBids: { type: 'boolean' },
        hireme: { type: 'boolean' },
        hiremeInitialBid: { $ref: 'defs.json#/definitions/HireMeInitialBid' },
        hourlyProjectInfo: {
          $ref: 'defs.json#/definitions/ProjectHourlyProjectInfo',
        },
        id: { type: 'number' },
        language: { type: 'string' },
        local: { type: 'boolean' },
        ownerId: { type: 'number' },
        previewDescription: { type: 'string' },
        projectCollaborations: {
          type: 'array',
          items: { $ref: 'defs.json#/definitions/ProjectCollaborations' },
        },
        seoUrl: { type: 'string' },
        status: { $ref: 'defs.json#/definitions/ProjectStatusApi' },
        subStatus: {
          description:
            "ProjectSubStatusApi.FROZEN_AWARDED - Waiting for response on award, frozen\nProjectSubStatusApi.CLOSED_AWARDED - Awarded by employer for any freelancer, revoke doesn't count\nProjectSubStatusApi.CANCEL_SELLER - User marks it as incomplete",
          enum: [
            'cancel_admin',
            'cancel_buyer',
            'cancel_seller',
            'closed_awarded',
            'closed_expired',
            'frozen_awarded',
            'frozen_timeout',
          ],
          type: 'string',
        },
        timeSubmitted: { type: 'number' },
        title: { type: 'string' },
        type: { $ref: 'defs.json#/definitions/ProjectTypeApi' },
        upgrades: { $ref: 'defs.json#/definitions/ProjectUpgrades' },
        poolIds: {
          type: 'array',
          items: {
            enum: [
              'api_e2e',
              'arrow_private',
              'deloitte_dc',
              'facebook',
              'flnltd',
              'freelancer',
              'freightlancer',
              'ibm',
              'johnson_and_johnson',
              'nokia',
            ],
            type: 'string',
          },
        },
        enterpriseIds: { type: 'array', items: { type: 'number' } },
        deloitteDetails: {
          $ref: 'defs.json#/definitions/DeloitteProjectDetails',
        },
        timeframe: { $ref: 'defs.json#/definitions/ProjectTimeframe' },
        isEscrowProject: { type: 'boolean' },
        isSellerKycRequired: { type: 'boolean' },
        isBuyerKycRequired: { type: 'boolean' },
        isDeloitteProject: { type: 'boolean' },
        isTokenProject: { type: 'boolean' },
        isArrowProject: { type: 'boolean' },
        selectedBids: {
          type: 'array',
          items: { $ref: 'defs.json#/definitions/Bid' },
        },
        files: {
          type: 'array',
          items: { $ref: 'defs.json#/definitions/ProjectFileApi' },
        },
        billingCode: { type: 'string' },
        customFieldValues: {
          type: 'array',
          items: {
            anyOf: [
              {
                allOf: [
                  {
                    type: 'object',
                    properties: {
                      customFieldInfoConfigurationId: { type: 'number' },
                      resourceId: { type: 'number' },
                      isDefaultValue: {
                        description:
                          'Indicates if the CustomFieldValue is a default value for the custom field.\nDefault value is configurable at the backend.',
                        type: 'boolean',
                      },
                    },
                    required: [
                      'customFieldInfoConfigurationId',
                      'isDefaultValue',
                      'resourceId',
                    ],
                  },
                  {
                    type: 'object',
                    properties: {
                      type: { type: 'string', enum: ['string'] },
                      value: { type: 'string' },
                    },
                    required: ['type', 'value'],
                  },
                ],
              },
              {
                allOf: [
                  {
                    type: 'object',
                    properties: {
                      customFieldInfoConfigurationId: { type: 'number' },
                      resourceId: { type: 'number' },
                      isDefaultValue: {
                        description:
                          'Indicates if the CustomFieldValue is a default value for the custom field.\nDefault value is configurable at the backend.',
                        type: 'boolean',
                      },
                    },
                    required: [
                      'customFieldInfoConfigurationId',
                      'isDefaultValue',
                      'resourceId',
                    ],
                  },
                  {
                    type: 'object',
                    properties: {
                      type: { type: 'string', enum: ['boolean'] },
                      value: { type: 'boolean' },
                    },
                    required: ['type', 'value'],
                  },
                ],
              },
              {
                allOf: [
                  {
                    type: 'object',
                    properties: {
                      customFieldInfoConfigurationId: { type: 'number' },
                      resourceId: { type: 'number' },
                      isDefaultValue: {
                        description:
                          'Indicates if the CustomFieldValue is a default value for the custom field.\nDefault value is configurable at the backend.',
                        type: 'boolean',
                      },
                    },
                    required: [
                      'customFieldInfoConfigurationId',
                      'isDefaultValue',
                      'resourceId',
                    ],
                  },
                  {
                    type: 'object',
                    properties: {
                      type: { type: 'string', enum: ['float'] },
                      value: { type: 'number' },
                    },
                    required: ['type', 'value'],
                  },
                ],
              },
              {
                allOf: [
                  {
                    type: 'object',
                    properties: {
                      customFieldInfoConfigurationId: { type: 'number' },
                      resourceId: { type: 'number' },
                      isDefaultValue: {
                        description:
                          'Indicates if the CustomFieldValue is a default value for the custom field.\nDefault value is configurable at the backend.',
                        type: 'boolean',
                      },
                    },
                    required: [
                      'customFieldInfoConfigurationId',
                      'isDefaultValue',
                      'resourceId',
                    ],
                  },
                  {
                    type: 'object',
                    properties: {
                      type: { type: 'string', enum: ['integer'] },
                      value: { type: 'number' },
                    },
                    required: ['type', 'value'],
                  },
                ],
              },
              {
                allOf: [
                  {
                    type: 'object',
                    properties: {
                      customFieldInfoConfigurationId: { type: 'number' },
                      resourceId: { type: 'number' },
                      isDefaultValue: {
                        description:
                          'Indicates if the CustomFieldValue is a default value for the custom field.\nDefault value is configurable at the backend.',
                        type: 'boolean',
                      },
                    },
                    required: [
                      'customFieldInfoConfigurationId',
                      'isDefaultValue',
                      'resourceId',
                    ],
                  },
                  {
                    type: 'object',
                    properties: {
                      type: { type: 'string', enum: ['timestamp'] },
                      value: { type: 'number' },
                    },
                    required: ['type', 'value'],
                  },
                ],
              },
              {
                allOf: [
                  {
                    type: 'object',
                    properties: {
                      customFieldInfoConfigurationId: { type: 'number' },
                      resourceId: { type: 'number' },
                      isDefaultValue: {
                        description:
                          'Indicates if the CustomFieldValue is a default value for the custom field.\nDefault value is configurable at the backend.',
                        type: 'boolean',
                      },
                    },
                    required: [
                      'customFieldInfoConfigurationId',
                      'isDefaultValue',
                      'resourceId',
                    ],
                  },
                  {
                    type: 'object',
                    properties: {
                      type: { type: 'string', enum: ['location'] },
                      value: { $ref: 'defs.json#/definitions/MapCoordinates' },
                    },
                    required: ['type', 'value'],
                  },
                ],
              },
              {
                allOf: [
                  {
                    type: 'object',
                    properties: {
                      customFieldInfoConfigurationId: { type: 'number' },
                      resourceId: { type: 'number' },
                      isDefaultValue: {
                        description:
                          'Indicates if the CustomFieldValue is a default value for the custom field.\nDefault value is configurable at the backend.',
                        type: 'boolean',
                      },
                    },
                    required: [
                      'customFieldInfoConfigurationId',
                      'isDefaultValue',
                      'resourceId',
                    ],
                  },
                  {
                    type: 'object',
                    properties: {
                      type: { type: 'string', enum: ['undefined'] },
                      value: { type: 'undefined' },
                    },
                    required: ['type', 'value'],
                  },
                ],
              },
            ],
          },
        },
        jobs: {
          type: 'array',
          items: { $ref: 'defs.json#/definitions/JobApi' },
        },
      },
      required: [
        'attachments',
        'bidStats',
        'budget',
        'canPostReview',
        'currency',
        'customFieldValues',
        'deleted',
        'hideBids',
        'hireme',
        'id',
        'isBuyerKycRequired',
        'isDeloitteProject',
        'isEscrowProject',
        'isSellerKycRequired',
        'isTokenProject',
        'language',
        'local',
        'ndaDetails',
        'ownerId',
        'previewDescription',
        'projectCollaborations',
        'qualifications',
        'selectedBids',
        'seoUrl',
        'skills',
        'status',
        'timeSubmitted',
        'title',
        'type',
        'upgrades',
      ],
    },
    ProjectAttachment: {
      type: 'object',
      properties: {
        id: { type: 'number' },
        accessHash: { type: 'string' },
        contentType: { type: 'string' },
        filename: { type: 'string' },
        timeSubmitted: { type: 'number' },
        url: { type: 'string' },
      },
      required: ['id'],
    },
    ReviewAvailabilityApi: {
      type: 'object',
      properties: {
        freelancer: { type: 'boolean' },
        employer: { type: 'boolean' },
      },
    },
    Location: {
      description:
        "A project's location details.\nUsed on the Project View Page and User Profiles",
      type: 'object',
      properties: {
        country: { $ref: 'defs.json#/definitions/Country' },
        city: { type: 'string' },
        mapCoordinates: { $ref: 'defs.json#/definitions/MapCoordinates' },
        vicinity: { type: 'string' },
        administrativeArea: { type: 'string' },
        fullAddress: { type: 'string' },
        postalCode: { type: 'string' },
      },
    },
    Country: {
      description: 'A country.',
      type: 'object',
      properties: {
        id: { type: 'string' },
        code: { type: 'string' },
        name: { type: 'string' },
        phoneCode: {
          description: 'only present when fetching the `countries` collection',
          type: 'number',
        },
        flagUrl: {
          description:
            "only present when fetching a user's location, e.g. `projectViewUsers`",
          type: 'string',
        },
      },
      required: ['code', 'id', 'name'],
    },
    MapCoordinates: {
      type: 'object',
      properties: {
        latitude: { type: 'number' },
        longitude: { type: 'number' },
      },
      required: ['latitude', 'longitude'],
    },
    NDADetails: {
      type: 'object',
      properties: {
        hiddenDescription: { type: 'string' },
        signatures: {
          type: 'array',
          items: { $ref: 'defs.json#/definitions/NDASignature' },
        },
      },
      required: ['signatures'],
    },
    NDASignature: {
      type: 'object',
      properties: {
        timeSigned: { type: 'number' },
        projectId: { type: 'number' },
        userId: { type: 'number' },
      },
      required: ['projectId', 'timeSigned', 'userId'],
    },
    Qualification: {
      type: 'object',
      properties: {
        id: { type: 'number' },
        description: { type: 'string' },
        iconName: { type: 'string' },
        iconUrl: { type: 'string' },
        insigniaId: { type: 'number' },
        level: { type: 'number' },
        name: { type: 'string' },
        scorePercentage: { type: 'number' },
        type: { type: 'string' },
        userPercentile: { type: 'number' },
      },
    },
    ProjectLocalDetails: {
      type: 'object',
      properties: {
        date: { $ref: 'defs.json#/definitions/ProjectLocalDetailsDateApi' },
        dateTimestamp: { type: 'number' },
        endLocation: { $ref: 'defs.json#/definitions/Location' },
        displayEndLocation: { type: 'string' },
      },
    },
    ProjectLocalDetailsDateApi: {
      type: 'object',
      properties: {
        year: { type: 'number' },
        month: { type: 'number' },
        day: { type: 'number' },
      },
      required: ['day', 'month', 'year'],
    },
    EquipmentApi: {
      type: 'object',
      properties: { id: { type: 'number' }, name: { type: 'string' } },
      required: ['id'],
    },
    ProjectBidStats: {
      type: 'object',
      properties: { bidCount: { type: 'number' }, bidAvg: { type: 'number' } },
      required: ['bidCount'],
    },
    ProjectBudget: {
      type: 'object',
      properties: {
        minimum: { type: 'number' },
        maximum: { type: 'number' },
        name: { type: 'string' },
        projectType: { enum: ['fixed', 'hourly'], type: 'string' },
        currencyId: { type: 'number' },
      },
      required: ['minimum'],
    },
    Currency: {
      description:
        'A supported currency, pulled from the API.\nSee `currenciesIncludingExternal` for the projection that includes external currencies.',
      type: 'object',
      properties: {
        code: { type: 'string' },
        country: { type: 'string' },
        id: { type: 'number' },
        name: { type: 'string' },
        sign: { type: 'string' },
        isExternal: { type: 'boolean' },
        exchangeRate: { type: 'number' },
      },
      required: ['code', 'id', 'sign'],
    },
    HireMeInitialBid: {
      type: 'object',
      properties: {
        bidderId: { type: 'number' },
        amount: { type: 'number' },
        period: { type: 'number' },
      },
      required: ['amount', 'bidderId', 'period'],
    },
    ProjectHourlyProjectInfo: {
      type: 'object',
      properties: {
        commitment: { $ref: 'defs.json#/definitions/CommitmentApi' },
        durationEnum: {
          enum: [
            'less_than_one_week',
            'one_to_four_weeks',
            'one_to_three_months',
            'ongoing',
            'three_to_six_months',
            'unknown',
            'unspecified',
          ],
          type: 'string',
        },
      },
    },
    CommitmentApi: {
      type: 'object',
      properties: {
        hours: { type: 'number' },
        interval: { $ref: 'defs.json#/definitions/TimeUnitApi' },
      },
      required: ['hours', 'interval'],
    },
    TimeUnitApi: {
      enum: [
        'century',
        'day',
        'decade',
        'hour',
        'millenium',
        'minute',
        'month',
        'second',
        'week',
        'year',
      ],
      type: 'string',
    },
    ProjectCollaborations: {
      type: 'object',
      properties: {
        context: { $ref: 'defs.json#/definitions/Context' },
        contextOwnerId: { type: 'number' },
        id: { type: 'number' },
        inviteToken: { type: 'string' },
        permissions: {
          type: 'array',
          items: {
            enum: [
              'bid_award',
              'chat',
              'collaborator_add',
              'dispute_create',
              'file_upload',
              'milestone_create',
              'milestone_release',
              'milestone_request',
              'milestone_view',
              'project_details_edit',
              'task_list_edit',
              'tracked_hours_approve',
              'unknown',
            ],
            type: 'string',
          },
        },
        status: {
          enum: [
            'accept_pending',
            'active',
            'inactive',
            'signup_pending',
            'unknown',
          ],
          type: 'string',
        },
        timeCreated: { type: 'number' },
        timeUpdated: { type: 'number' },
        userId: { type: 'number' },
      },
      required: ['id', 'permissions'],
    },
    Context: {
      type: 'object',
      properties: {
        id: { type: 'number' },
        type: { $ref: 'defs.json#/definitions/ContextTypeApi' },
      },
      required: ['id', 'type'],
    },
    ContextTypeApi: { enum: ['contest', 'none', 'project'], type: 'string' },
    ProjectStatusApi: {
      enum: ['active', 'closed', 'draft', 'frozen', 'pending', 'rejected'],
      type: 'string',
    },
    ProjectTypeApi: { enum: ['fixed', 'hourly'], type: 'string' },
    ProjectUpgrades: {
      type: 'object',
      properties: {
        assisted: { type: 'boolean' },
        featured: { type: 'boolean' },
        fulltime: { type: 'boolean' },
        ipContract: { type: 'boolean' },
        listed: { type: 'boolean' },
        NDA: { type: 'boolean' },
        nonpublic: { type: 'boolean' },
        projectManagement: { type: 'boolean' },
        qualified: { type: 'boolean' },
        sealed: { type: 'boolean' },
        urgent: { type: 'boolean' },
        extend: { type: 'boolean' },
        unpaidRecruiter: { type: 'boolean' },
        pfOnly: { type: 'boolean' },
      },
      required: [
        'NDA',
        'assisted',
        'extend',
        'featured',
        'fulltime',
        'ipContract',
        'listed',
        'nonpublic',
        'projectManagement',
        'qualified',
        'sealed',
        'urgent',
      ],
    },
    DeloitteProjectDetails: {
      description: 'Deloitte project details found in a Deloitte project',
      type: 'object',
      properties: {
        billingCode: { type: 'string' },
        industryOffering: {
          $ref: 'defs.json#/definitions/DeloitteIndustryOffering',
        },
        clearance: { type: 'string' },
        itar: { type: 'boolean' },
      },
      required: ['billingCode', 'industryOffering'],
    },
    DeloitteIndustryOffering: {
      type: 'object',
      properties: {
        projectType: { $ref: 'defs.json#/definitions/DeloitteProjectTypeApi' },
        practice: { $ref: 'defs.json#/definitions/DeloittePracticeApi' },
        industry: { $ref: 'defs.json#/definitions/DeloitteIndustryApi' },
        offering: { $ref: 'defs.json#/definitions/DeloitteOfferingApi' },
      },
      required: ['industry', 'offering', 'practice', 'projectType'],
    },
    DeloitteProjectTypeApi: {
      enum: [
        'client_billable',
        'firm_initiative',
        'internal_services',
        'other_investment',
        'prd',
        'skills_based_volunteering',
      ],
      type: 'string',
    },
    DeloittePracticeApi: {
      enum: [
        'commercial_core',
        'commercial_usdc_incenter',
        'commercial_usdc_onsite',
        'gps_core',
        'gps_operational_excellence',
        'gps_usdc_incenter',
        'gps_usdc_onsite',
        'usi_offshore',
        'usi_onsite',
      ],
      type: 'string',
    },
    DeloitteIndustryApi: {
      enum: [
        'automotive',
        'automotive_transportation_hospitality_and_services',
        'banking_and_capital_markets',
        'civil_government',
        'consumer_products',
        'cross_sector_c',
        'cross_sector_ci',
        'cross_sector_eri',
        'cross_sector_fs',
        'cross_sector_gps',
        'cross_sector_lshc',
        'cross_sector_tmt',
        'defense_security_and_justice',
        'federal_health',
        'health_care',
        'industrial_products_and_construction',
        'insurance',
        'investment_management',
        'investment_management_and_real_estate',
        'life_sciences',
        'media_and_entertainment',
        'oil_gas_and_chemicals',
        'power_and_utilities',
        'real_estate',
        'retail_and_consumer_products',
        'retail_wholesale_and_distribution',
        'state_local_and_higher_education',
        'technology',
        'telecom_media_and_entertainment',
        'transportation_hospitality_and_services',
      ],
      type: 'string',
    },
    DeloitteOfferingApi: {
      enum: [
        'cbo_cloud_engineering',
        'cbo_core_industry_solutions',
        'cbo_cross_consulting_group',
        'cbo_health_technology',
        'cbo_operations_transformation',
        'cbo_other',
        'cbo_systems_engineering',
        'cnm_advertising_marketing_and_commerce',
        'cnm_asset_group',
        'cnm_cross_consulting_group',
        'cnm_customer_strategy_and_applied_design',
        'cnm_digital_customer',
        'cnm_human_services_transformation',
        'cnm_other',
        'eo_asset_group',
        'eo_cross_consulting_group',
        'eo_erp_saas',
        'eo_finance_and_enterprise_performance',
        'eo_oracle',
        'eo_other',
        'eo_sap',
        'eo_supply_chain_and_network_operations',
        'eo_technology_services_optimization',
        'gpsea_gps_client_excellence',
        'gpsea_gps_compliance',
        'gpsea_gps_contracts',
        'gpsea_gps_ea_management',
        'gpsea_gps_finance',
        'gpsea_gps_general_counsel',
        'gpsea_gps_operations',
        'gpsea_gps_talent',
        'hc_asset_group',
        'hc_cross_consulting_group',
        'hc_hc_as_a_service',
        'hc_hr_transformation',
        'hc_organization_transformation',
        'hc_other',
        'hc_workforce_transformation',
        'is_gps_business_services',
        'is_gps_business_systems',
        'is_gps_compliance',
        'is_gps_contracts',
        'is_gps_finance',
        'is_gps_ops_management',
        'is_gps_security',
        'is_gps_talent',
        'mna_ccg',
        'mna_integration_and_divesture',
        'mna_mergers_and_acquisitions',
        'mna_other',
        'nc_adjustments_or_other',
        'nc_alliances',
        'nc_c_suite',
        'nc_client_and_industry',
        'nc_client_excellence',
        'nc_cloud',
        'nc_corporate_development',
        'nc_delivery_excellence',
        'nc_dtoc',
        'nc_international',
        'nc_n_o_global_consulting_office',
        'nc_national_consulting',
        'nc_offering_portfolio',
        'nc_operation_and_finance',
        'nc_other_usi',
        'nc_partner_matters',
        'nc_sales_and_pursuit_excellence',
        'nc_strategy',
        'nc_talent',
        'nc_tech_and_innovation',
        'p_organic',
        'p_snet',
        'sna_analytics_and_cognitive',
        'sna_asset_group',
        'sna_cross_consulting_group',
        'sna_hybrid_solutions_and_incubation',
        'sna_other',
        'sna_strategy',
      ],
      type: 'string',
    },
    ProjectTimeframe: {
      type: 'object',
      properties: {
        startDate: { type: 'number' },
        endDate: { type: 'number' },
      },
    },
    Bid: {
      description: 'A bid placed on a project.',
      type: 'object',
      properties: {
        id: { type: 'number' },
        bidderId: { type: 'number' },
        projectId: { type: 'number' },
        retracted: { type: 'boolean' },
        amount: { type: 'number' },
        period: { type: 'number' },
        description: { type: 'string' },
        projectOwnerId: { type: 'number' },
        submitDate: { type: 'number' },
        buyerProjectFee: { $ref: 'defs.json#/definitions/Fee' },
        timeSubmitted: { type: 'number' },
        highlighted: { type: 'boolean' },
        sponsored: { type: 'number' },
        milestonePercentage: { type: 'number' },
        awardStatusPossibilities: {
          type: 'array',
          items: {
            enum: ['awarded', 'canceled', 'pending', 'rejected', 'revoked'],
            type: 'string',
          },
        },
        awardStatus: {
          enum: ['awarded', 'canceled', 'pending', 'rejected', 'revoked'],
          type: 'string',
        },
        paidStatus: {
          enum: ['fully_paid', 'partly_paid', 'unpaid'],
          type: 'string',
        },
        completeStatus: {
          enum: ['complete', 'incomplete', 'pending'],
          type: 'string',
        },
        timeAwarded: { type: 'number' },
        frontendBidStatus: {
          enum: ['active', 'complete', 'in_progress'],
          type: 'string',
        },
        shortlisted: { type: 'boolean' },
        score: { type: 'number' },
        distance: { type: 'number' },
        negotiatedOffer: { $ref: 'defs.json#/definitions/NegotiatedOfferApi' },
        hidden: { type: 'boolean' },
        hiddenReason: {
          enum: [
            'advertising',
            'contacts',
            'fake',
            'harassment',
            'not_interesting',
          ],
          type: 'string',
        },
        timeAccepted: { type: 'number' },
        paidAmount: { type: 'number' },
        hourlyRate: { type: 'number' },
        isLocationTracked: { type: 'boolean' },
        awardExpireTime: {
          description: '36 hours after bid is awarded',
          type: 'number',
        },
        extraForUpdate: { $ref: 'defs.json#/definitions/BidAwardExtraFields' },
        sealed: { type: 'boolean' },
        completeStatusChangedTime: { type: 'number' },
        awardStatusChangedTime: { type: 'number' },
        rejectReasonCode: {
          enum: [
            'both_budget',
            'employer_nomilestone',
            'employer_spam',
            'employer_unclear',
            'freelancer_enoughwork',
            'freelancer_noskills',
            'freelancer_notime',
            'other',
          ],
          type: 'string',
        },
        otherFeedback: { type: 'string' },
        rating: { $ref: 'defs.json#/definitions/BidRating' },
      },
      required: [
        'amount',
        'bidderId',
        'id',
        'period',
        'projectId',
        'submitDate',
      ],
    },
    Fee: {
      type: 'object',
      properties: {
        amount: { type: 'number' },
        is_taxed: { type: 'boolean' },
        currency: { $ref: 'defs.json#/definitions/Currency' },
        rate: { type: 'number' },
        rate_with_tax: { type: 'number' },
      },
      required: ['amount', 'is_taxed'],
    },
    NegotiatedOfferApi: {
      type: 'object',
      properties: {
        project_id: { type: 'number' },
        freelancer_id: { type: 'number' },
        status: {
          enum: [
            'employer_accepted',
            'employer_pending',
            'employer_rejected',
            'employer_requested',
            'freelancer_pending',
            'freelancer_rejected',
          ],
          type: 'string',
        },
        requested_milestones: { enum: ['all', 'none', 'one'], type: 'string' },
        time_updated: { type: 'number' },
      },
    },
    BidAwardExtraFields: {
      type: 'object',
      properties: {
        workLimit: { type: 'number' },
        billingCycle: { enum: ['monthly', 'weekly'], type: 'string' },
        skipHourlyContract: { type: 'boolean' },
      },
    },
    BidRating: {
      description:
        'Bids can be rated by employers, and this information is represented\nin this interface.\n\nBid ratings will primarily be fetched and updated on the Proposals tab\nof the Project View page',
      type: 'object',
      properties: {
        authorId: { type: 'number' },
        bidId: { type: 'number' },
        comment: { type: 'string' },
        id: { type: 'number' },
        rating: { type: 'number' },
        timeCreated: { type: 'number' },
        timeUpdated: { type: 'number' },
      },
      required: ['authorId', 'bidId', 'id', 'rating'],
    },
    ProjectFileApi: {
      type: 'object',
      properties: {
        id: { type: 'number' },
        from_user_id: { type: 'number' },
        to_user_id: { type: 'number' },
        project_id: { type: 'number' },
        file_name: { type: 'string' },
        file_size: { type: 'number' },
        time_submitted: { type: 'number' },
        url: { type: 'string' },
        content_type: { type: 'string' },
      },
    },
    JobApi: {
      type: 'object',
      properties: {
        id: { type: 'number' },
        name: { type: 'string' },
        category: { $ref: 'defs.json#/definitions/CategoryApi' },
        active_project_count: { type: 'number' },
        seo_url: { type: 'string' },
        seo_info: { $ref: 'defs.json#/definitions/JobSeoInfoApi' },
        local: { type: 'boolean' },
      },
      required: ['id'],
    },
    CategoryApi: {
      type: 'object',
      properties: { id: { type: 'number' }, name: { type: 'string' } },
      required: ['id'],
    },
    JobSeoInfoApi: {
      type: 'object',
      properties: {
        seo_text: { type: 'string' },
        seo_text_alt: { type: 'string' },
        seo_worker: { type: 'string' },
        seo_worker_alt: { type: 'string' },
        seo_worker_plural: { type: 'string' },
        seo_worker_plural_alt: { type: 'string' },
        phrase_worker: { type: 'string' },
        context_phrase_worker: { type: 'string' },
        plural_phrase_worker: { type: 'string' },
        country_person: { type: 'string' },
        country_demonym: { type: 'string' },
      },
    },
    FocusState: { enum: [0, 1, 2], type: 'number' },
    ThreadIdentifier: {
      type: 'object',
      properties: {
        id: { type: 'number' },
        threadType: { $ref: 'defs.json#/definitions/ThreadType' },
        context: {
          anyOf: [
            {
              type: 'object',
              properties: {
                type: { $ref: 'defs.json#/definitions/ThreadContextType' },
                id: { type: 'number' },
              },
              required: ['id', 'type'],
            },
            {
              type: 'object',
              properties: { type: { type: 'string', enum: ['none'] } },
              required: ['type'],
            },
          ],
        },
        members: { type: 'array', items: { type: 'number' } },
        isFake: { type: 'boolean' },
      },
      required: ['context', 'id', 'isFake', 'members', 'threadType'],
    },
    ThreadType: {
      enum: [
        'admin_preferred_chat',
        'group',
        'pcb',
        'primary',
        'private_chat',
        'support_chat',
        'team',
        'team_official',
      ],
      type: 'string',
    },
    ThreadContextType: {
      enum: [
        'contest',
        'prehire',
        'project',
        'support_chat',
        'support_session',
        'team',
      ],
      type: 'string',
    },
    DraftMessage: {
      type: 'object',
      properties: { text: { type: 'string' }, lastUpdated: { type: 'number' } },
      required: ['lastUpdated', 'text'],
    },
    TaskListState: {
      type: 'object',
      properties: {
        currentTaskClean: { type: 'boolean' },
        draftTask: {
          anyOf: [
            { $ref: 'defs.json#/definitions/Task' },
            { $ref: 'defs.json#/definitions/Partial<Task>' },
          ],
        },
      },
    },
    Task: {
      description: "A task on a project's task list.",
      type: 'object',
      properties: {
        id: { type: 'number' },
        ownerId: { type: 'number' },
        createTime: { type: 'number' },
        source: { $ref: 'defs.json#/definitions/TaskSourceApi' },
        status: { $ref: 'defs.json#/definitions/TaskStatusApi' },
        list: { type: 'string', enum: ['default_list'] },
        assigneeId: { type: 'number' },
        dueDate: { type: 'number' },
        title: { type: 'string' },
        description: { type: 'string' },
      },
      required: ['createTime', 'id', 'list', 'ownerId', 'source', 'status'],
    },
    TaskSourceApi: {
      type: 'object',
      properties: {
        id: { type: 'number' },
        type: { type: 'string', enum: ['project'] },
      },
      required: ['id', 'type'],
    },
    TaskStatusApi: {
      enum: ['closed_deleted', 'closed_resolved', 'in_progress'],
      type: 'string',
    },
    'Partial<Task>': {
      type: 'object',
      properties: {
        id: { type: 'number' },
        ownerId: { type: 'number' },
        createTime: { type: 'number' },
        source: { $ref: 'defs.json#/definitions/TaskSourceApi' },
        status: {
          enum: ['closed_deleted', 'closed_resolved', 'in_progress'],
          type: 'string',
        },
        list: { enum: ['default_list'], type: 'string' },
        assigneeId: { type: 'number' },
        dueDate: { type: 'number' },
        title: { type: 'string' },
        description: { type: 'string' },
      },
    },
    LastSeenPjpAssistant: {
      type: 'object',
      properties: { time: { type: 'number' } },
      required: ['time'],
    },
    HireMeDraft: {
      type: 'object',
      properties: {
        budget: { type: 'number' },
        currencyId: { type: 'number' },
        freelancerId: { type: 'number' },
        hireFor: { type: 'string' },
        hoursPerWeek: { type: 'number' },
        message: { type: 'string' },
        confirmed: { type: 'boolean' },
      },
      required: [
        'budget',
        'currencyId',
        'freelancerId',
        'hireFor',
        'hoursPerWeek',
        'message',
      ],
    },
    PostJobPageFormState: {
      description:
        "This stores the value of the fields in PJP which can be saved as a draft.\nIt consist of fields for both Projects and Contests. In the DB, this is\nstored as a stringified JSON in the `draft` table.\n\nNote that all fields are nullable except for the id, title, and description.\nAn id is required for the documents that we keep in the datastore. Also, we\nonly begin saving drafts when there's a title and description.\n\nAdditionally, the reason for choosing `null` over `undefined` is that the\nfield whose value is `undefined` gets removed from the resulting string when\nwe `JSON.stringify` the object. We want to avoid having inconsistent format\nin the DB so we used `null` instead.\n\nThere is also an inconsistent type for contestUpgrades where it initially\ncontains `ContestUpgrade`. When the contest type card is selected, it now\ncontains an array of selected upgrades (T92144).\n\nLastly, the corresponding type of the following fields are currently defined\nin `JobPostModule`. In order to declare the types properly, we must move\nthe definitions to a model file so that they can be imported here (T92109):\n- contestDurationType: DurationType\n- jobType: JobType\n- projectBudgetType: BudgetType",
      type: 'object',
      properties: {
        communitySelection: {
          enum: ['facebook', 'freelancer'],
          type: 'string',
        },
        contestDuration: { type: ['null', 'number'] },
        contestDurationType: { type: ['null', 'string'] },
        contestPrize: { type: ['null', 'number'] },
        contestType: {
          anyOf: [
            { enum: ['basic', 'guaranteed'], type: 'string' },
            { type: 'null' },
          ],
        },
        currencyId: { type: ['null', 'number'] },
        description: { type: 'string' },
        hasBillingCode: { type: ['null', 'boolean'] },
        billingCode: { type: ['null', 'string'] },
        audience: {
          anyOf: [
            { enum: ['flnltd', 'flnltd_and_marketplace'], type: 'string' },
            { type: 'null' },
          ],
        },
        id: { type: 'number' },
        isLocal: { type: ['null', 'boolean'] },
        jobType: { type: ['null', 'string'] },
        projectBudgetRange: {
          anyOf: [
            { $ref: 'defs.json#/definitions/ProjectBudgetOption' },
            { type: 'null' },
          ],
        },
        projectBudgetType: { type: ['null', 'string'] },
        projectType: {
          anyOf: [
            { enum: ['recruiter', 'standard'], type: 'string' },
            { type: 'null' },
          ],
        },
        skills: {
          anyOf: [
            { type: 'array', items: { $ref: 'defs.json#/definitions/Skill' } },
            { type: 'null' },
          ],
        },
        submitDate: { type: ['null', 'number'] },
        templateSelection: {
          enum: [
            'advanced-matching',
            'facebook-pixel',
            'facebook-pixel-and-catalog',
            'other',
          ],
          type: 'string',
        },
        title: { type: 'string' },
        userId: { type: 'number' },
      },
      required: [
        'contestDuration',
        'contestDurationType',
        'contestPrize',
        'contestType',
        'currencyId',
        'description',
        'id',
        'isLocal',
        'jobType',
        'projectBudgetRange',
        'projectBudgetType',
        'projectType',
        'skills',
        'submitDate',
        'title',
        'userId',
      ],
    },
    ProjectBudgetOption: {
      description:
        'A budget range for a project.\nPulled from the Projects API.',
      type: 'object',
      properties: {
        id: { type: 'string' },
        minimum: { type: 'number' },
        maximum: { type: 'number' },
        name: { type: 'string' },
        projectType: { $ref: 'defs.json#/definitions/ProjectTypeApi' },
        currencyId: { type: 'number' },
        language: { type: 'string' },
      },
      required: ['currencyId', 'id', 'minimum', 'name', 'projectType'],
    },
    ManageRecentTable: {
      description:
        'Interface used for remembering recently viewed tables in /manage',
      type: 'object',
      properties: {
        employerTable: { type: 'string' },
        freelancerTable: { type: 'string' },
        manageTable: { type: 'string' },
      },
      required: ['employerTable', 'freelancerTable'],
    },
    MockProfile: {
      type: 'object',
      properties: { id: { type: 'number' }, name: { type: 'string' } },
      required: ['id', 'name'],
    },
  },
};
